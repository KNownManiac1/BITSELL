8/823..l9aazza1q12w3 

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
var online=[];
socks={};
var chats={};
var index;
io.sockets.on('connection',function(socket){
  
  socket.on('user',function(data){
    socket.name=data;
    console.log(socket.name);
    if(online.indexOf(data)==-1)
    {
      socket.name=data;
      online.push(data);
      console.log(online);
      index=online.indexOf(data);
    }
    if(!socks[socket.name])
    socks[socket.name]={};
    socks[socket.name].sockname=socket;
    console.log(socks);
    console.log(online);
    io.sockets.emit('online',online);
  });
  socket.on('msg',function(msg,name2,name1){
    if(socks[socket.name][name2])
      socks[socket.name][name2].push('1'+msg);
    else
    {
         socks[socket.name][name2]=[];
      socks[socket.name][name2].push('1'+msg);
    }
    
    if(!socks[name2])
      socks[name2]={};
    if(socks[name2][name1])
      socks[name2][name1].push('0'+msg);
    else
    {
      socks[name2][name1]=[];
      socks[name2][name1].push('0'+msg);
    }
    console.log(socks);
    socket.emit('msg1',socks[name2][name1],name2,name1);
    if(socks[name2].sockname)
    socks[name2].sockname.emit('msg1',socks[name2][name1],name2,name1);
    io.sockets.emit('online',online);
  });
   socket.on('disconnect', function(){
    console.log('user disconnected');
    if(online.indexOf(socket.name)!=-1)
    {
      online.splice(online.indexOf(socket.name),1);
    }
    console.log(online);
    io.sockets.emit('online',online);
  });
 
});


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
